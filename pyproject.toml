[build-system]
requires = [
    "scikit-build-core>=0.11.2",
    "setuptools-scm>=8.3.1",
    "pybind11>=2.13.6",
    "mqt.core~=3.0.2",
]
build-backend = "scikit_build_core.build"

[project]
name = "mqt.qusat"
description= "MQT QuSAT - A Tool for Utilizing SAT in Quantum Computing"
readme = "README.md"
authors = [
    { name = "Lucas Berent", email = "lucas.berent@tum.de" },
    { name = "Lukas Burgholzer", email = "lukas.burgholzer@tum.de" },
]
keywords = ["MQT", "quantum-computing", "design-automation", "satisfiability"]
license = "MIT"
license-files = ["LICENSE.md"]

classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: C++",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Operating System :: POSIX :: Linux",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
    "Typing :: Typed",
]
requires-python = ">=3.9"
dependencies = [
    "mqt.core>=3.0.2",
]
dynamic = ["version"]

[project.optional-dependencies]
qiskit = ["qiskit[qasm3-import]>=1.0.0"]

[project.urls]
Homepage = "https://github.com/munich-quantum-toolkit/qusat"
Issues = "https://github.com/munich-quantum-toolkit/qusat/issues"
Discussions = "https://github.com/munich-quantum-toolkit/qusat/discussions"
Research = "https://www.cda.cit.tum.de/research/quantum"

[tool.scikit-build]
# Protect the configuration against future changes in scikit-build-core
minimum-version = "build-system.requires"

# Set the wheel install directory
wheel.install-dir = "mqt/qusat"

# Explicitly set the package directory
wheel.packages = ["src/mqt"]

# Set required Ninja version
ninja.version = ">=1.10"

# Setuptools-style build caching in a local directory
build-dir = "build/{wheel_tag}/{build_type}"

# Only build the Python bindings target
build.targets = ["pyqusat"]

install.components = ["mqt-qusat_Python"]

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["src/mqt/qusat/_version.py"]
sdist.exclude = [
    "**/.github",
    "**/doc",
    "**/docs",
    "**/meta",
    "**/plots",
    "**/test",
    "**/tests",
]

[tool.scikit-build.cmake.define]
BUILD_MQT_QUSAT_TESTS = "OFF"
BUILD_MQT_QUSAT_BINDINGS = "ON"
ENABLE_IPO = "ON"


[[tool.scikit-build.overrides]]
if.python-version = ">=3.13"
if.abi-flags = "t"
if.platform-system = "win32"
inherit.cmake.define = "append"
cmake.define.DISABLE_GIL = "1"


[tool.check-sdist]
sdist-only = ["src/mqt/qusat/_version.py"]
git-only = [
    "docs/*",
    "extern/*",
    "test/*",
    ".idea/*",
]


[tool.setuptools_scm]
write_to = "src/mqt/qusat/_version.py"


[tool.pytest.ini_options]
minversion = "7.2"
testpaths = ["test/python"]
addopts = ["-ra", "--strict-markers", "--strict-config", "--showlocals"]
log_cli_level = "INFO"
xfail_strict = true
filterwarnings = ["error"]


[tool.coverage]
run.source = ["mqt.qusat"]
report.exclude_also = [
    '\.\.\.',
    'if TYPE_CHECKING:',
    'raise AssertionError',
    'raise NotImplementedError',
    'def __dir__()',  # Ignore __dir__ method that exists mainly for better IDE support
    '@overload'  # Overloads are only for static typing
]


[tool.mypy]
files = ["src/mqt", "test/python", "noxfile.py"]
mypy_path = ["$MYPY_CONFIG_FILE_DIR/src"]
python_version = "3.9"
warn_unused_configs = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
strict = true
disallow_untyped_defs = false
explicit_package_bases = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = ["qiskit.*"]
ignore_missing_imports = true


[tool.check-wheel-contents]
ignore = ["W002"]  # Triggers on __init__.py's


[tool.ruff]
line-length = 120
namespace-packages = ["mqt"]
extend-exclude = ["results/visualizer.py"]
preview = true
unsafe-fixes = true

[tool.ruff.lint]
extend-select = [
    "A",           # flake8-builtins
    "ANN",         # flake8-annotations
    "ARG",         # flake8-unused-arguments
    "ASYNC",       # flake8-async
    "B",  "B904",  # flake8-bugbear
    "C4",          # flake8-comprehensions
    "D",           # pydocstyle
    "EM",          # flake8-errmsg
    "EXE",         # flake8-executable
    "FA",          # flake8-future-annotations
    "FLY",         # flynt
    "FURB",        # refurb
    "I",           # isort
    "ICN",         # flake8-import-conventions
    "ISC",         # flake8-implicit-str-concat
    "LOG",         # flake8-logging-format
    "N",           # flake8-naming
    "NPY",         # numpy
    "PERF",        # perflint
    "PGH",         # pygrep-hooks
    "PIE",         # flake8-pie
    "PL",          # pylint
    "PT",          # flake8-pytest-style
    "PTH",         # flake8-use-pathlib
    "PYI",         # flake8-pyi
    "Q",           # flake8-quotes
    "RET",         # flake8-return
    "RSE",         # flake8-raise
    "RUF",         # Ruff-specific
    "S",           # flake8-bandit
    "SLF",         # flake8-self
    "SLOT",        # flake8-slots
    "SIM",         # flake8-simplify
    "T20",         # flake8-print
    "TCH",         # flake8-type-checking
    "TID",         # flake8-tidy-imports
    "TRY",         # tryceratops
    "UP",          # pyupgrade
    "YTT",         # flake8-2020
]
ignore = [
    "ISC001",  # Conflicts with formatter
    "PLR09",   # Too many <...>
    "PLR2004", # Magic value used in comparison
    "PLC0415", # Import should be at top of file
    "S101",    # Use of assert detected
]
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."

[tool.ruff.lint.per-file-ignores]
"test/python/**" = [
    "T20",  # allow print statements in tests
    "PLC2701"  # allow private name imports in tests
]
"docs/**" = ["T20"]
"noxfile.py" = ["T20", "TID251"]
"*.pyi" = ["D418", "DOC202", "PYI011", "PYI021"]
"*.ipynb" = [
    "D",    # pydocstyle
    "E402", # Allow imports to appear anywhere in Jupyter notebooks
    "I002", # Allow missing `from __future__ import annotations` import
]

[tool.ruff.lint.pydocstyle]
convention = "google"


[tool.typos]
default.extend-ignore-re = [
    '"id": ".*",',
    "(?Rm)^.*(#|//)\\s*spellchecker:disable-line$",  # ignore line
    "(?s)(#|//)\\s*spellchecker:off.*?\\n\\s*(#|//)\\s*spellchecker:on" # ignore block
]
[tool.typos.default.extend-words]
wille = "wille"
anc = "anc"
aer = "aer"
lits = "lits"


[tool.cibuildwheel]
build = "cp3*"
skip = "*-musllinux_*"
archs = "auto64"
test-groups = ["test"]
test-command = "pytest {project}/test/python"
build-frontend = "build[uv]"
enable = ["cpython-freethreading"]
manylinux-x86_64-image = "manylinux_2_28"
manylinux-aarch64-image = "manylinux_2_28"
manylinux-ppc64le-image = "manylinux_2_28"
manylinux-s390x-image = "manylinux_2_28"
test-skip = [
  "cp3*t-*", # no freethreading qiskit wheels
  "cp*-win_arm64", # no numpy, qiskit, ... wheels
]

# The mqt-core shared libraries are provided by the mqt-core Python package.
# They should not be vendorized into the mqt-qcec wheel. This requires
# excluding the shared libraries from the repair process.

[tool.cibuildwheel.linux]
environment = { Z3_ROOT="/opt/python/cp311-cp311/lib/python3.11/site-packages/z3", DEPLOY="ON" }
before-all = "/opt/python/cp311-cp311/bin/pip install z3-solver==4.12.6"
repair-wheel-command = [
    "export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/python/cp311-cp311/lib/python3.11/site-packages/z3/lib",
    """auditwheel repair -w {dest_dir} {wheel} \
  --exclude libmqt-core-ir.so.3.0 \
  --exclude libmqt-core-qasm.so.3.0 \
  --exclude libmqt-core-circuit-optimizer.so.3.0""",
]

[tool.cibuildwheel.macos]
environment = { MACOSX_DEPLOYMENT_TARGET = "11.0" }
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --ignore-missing-dependencies"

[tool.cibuildwheel.windows]
before-build = "uv pip install delvewheel>=1.9.0"
repair-wheel-command = """delvewheel repair -w {dest_dir} {wheel} --namespace-pkg mqt \
--exclude mqt-core-ir.dll \
--exclude mqt-core-qasm.dll \
--exclude mqt-core-circuit-optimizer.dll"""


[tool.uv]
required-version = ">=0.6.9"
reinstall-package = ["mqt.qusat"]

[tool.uv.sources]
mqt-qusat = { workspace = true }

[dependency-groups]
build = [
  "pybind11>=2.13.6",
  "scikit-build-core>=0.11.2",
  "setuptools-scm>=8.3.1",
  "mqt.core~=3.0.2",
]
test = [
  "pytest>=8.3.5",
  "pytest-cov>=6.1.1",
  "qiskit[qasm3-import]>=1.0.0",
  "numpy>=2.1; python_version >= '3.13'",
]
dev = [
  {include-group = "build"},
  {include-group = "test"},
]
